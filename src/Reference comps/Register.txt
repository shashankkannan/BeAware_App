import React, { useState } from 'react';
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
import { Link } from 'react-router-dom';
import { getDatabase, ref, push, set } from 'firebase/database';
import { getAuth, createUserWithEmailAndPassword } from 'firebase/auth';

// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyBydzDcp1Qst5mZd9j7AjwiodwTq1oBbq0",
  authDomain: "beawareg13-bdd89.firebaseapp.com",
  databaseURL: "https://beawareg13-bdd89-default-rtdb.firebaseio.com",
  projectId: "beawareg13-bdd89",
  storageBucket: "beawareg13-bdd89.appspot.com",
  messagingSenderId: "634689069450",
  appId: "1:634689069450:web:777dd650f473151ddb6873",
  measurementId: "G-ZBHNPLZDNC"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const database = getDatabase(app);
const auth = getAuth(app);
const Register = () => {
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    confirmPassword: '',
    colorCode: '',
    streamName: '',
    logo: null,
  });

  const handleChange = (e) => {
    const { name, value, type } = e.target;

    // Handle file input separately
    if (type === 'file') {
      const file = e.target.files[0];
      setFormData({ ...formData, [name]: file });
    } else {
      setFormData({ ...formData, [name]: value });
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if(formData.password ==formData.confirmPassword){
      try {
        const userCredential = await createUserWithEmailAndPassword(auth, formData.email, formData.password);
        const user = userCredential.user;
        const usersRef = ref(database, 'users');
        const usersRef1 = push(usersRef)
        await set(usersRef1, {
        [formData.username]: formData,
        });
        // Here, you can handle the user registration success
        console.log('User registered:', user);
      } catch (error) {
        // Handle registration errors
        console.error('Registration error:', error.message);
      }
        console.log('Form submitted:', formData);
    }
    else{
      console.log('Password does not match, registration error:', formData);
    }
    
  };

  return (
    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', width: '50vw', marginLeft: '20%' }}>
      {/* Left Section: Image */}
      <div style={{ flex: '1', marginRight: '20px' }}>
        <img src="/bg_signup.jpg" alt='image not loaded' style={{ width: '50%', height: 'auto', borderRadius: '10px' }} />
      </div>

      {/* Right Section: Card View */}
      <div style={{ flex: '1', backgroundColor: '#A6E4F6', padding: '20px', borderRadius: '10px', boxShadow: '0 0 10px rgba(0, 0, 0, 0.1)' }}>
    <h1>Sign Up</h1>
      <form onSubmit={handleSubmit} style={{marginRight: '20px'}}>
        <label style={{ marginBottom: '10px', width: '100%' }}>
          Username:
          <input
            type="text"
            name="username"
            value={formData.username}
            onChange={handleChange}
            required
            style={{ marginLeft: '10px', width: '100%' }}
          />
        </label>
        <br />

        <label style={{ marginBottom: '10px', width: '100%' }}>
          Email:
          <input
            type="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            required
            style={{ marginLeft: '10px', width: '100%' }}
          />
        </label>
        <br />

        <label style={{ marginBottom: '10px', width: '100%' }}>
          Password:
          <input
            type="password"
            name="password"
            value={formData.password}
            onChange={handleChange}
            required
            style={{ marginLeft: '10px', width: '100%' }}
          />
        </label>
        <br />

        <label style={{ marginBottom: '10px', width: '100%' }}>
          Confirm Password:
          <input
            type="password"
            name="confirmPassword"
            value={formData.confirmPassword}
            onChange={handleChange}
            required
            style={{ marginLeft: '10px', width: '100%' }}
          />
        </label>
        <br />

        <label style={{ marginBottom: '10px', width: '100%' }}>
          Color Code:
          <input
            type="text"
            name="colorCode"
            value={formData.colorCode}
            onChange={handleChange}
            style={{ marginLeft: '10px', width: '100%' }}
          />
        </label>
        <br />

        <label style={{ marginBottom: '10px', width: '100%' }}>
          Stream Name:
          <input
            type="text"
            name="streamName"
            value={formData.streamName}
            onChange={handleChange}
            style={{ marginLeft: '10px', width: '100%' }}
          />
        </label>
        <br />

        <label style={{ marginBottom: '10px', width: '100%' }}>
          Logo (Image Upload):
          <input
            type="file"
            name="logo"
            accept="image/*"
            onChange={handleChange}
            style={{ marginLeft: '10px', width: '100%' }}
          />
        </label>
        <br />

        <button type="submit">Sign Up</button>
      </form>
    </div>
    </div>
  );
};

export default Register;